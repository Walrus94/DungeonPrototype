networks:
  shared_net:
    external: true

services:

  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yml
    volumes:
      - ./loki-config.yml:/etc/loki/local-config.yml
    restart: unless-stopped
    networks:
      - shared_net

  promtail:
    image: grafana/promtail:2.9.2
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    networks:
      - shared_net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
        - ./prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
    networks:
      - shared_net

  mongodb-exporter:
    image: crobox/mongodb-exporter:latest
    container_name: mongodb-exporter
    environment:
      MONGODB_URI: mongodb://${MONGO_DB_USER}:${MONGO_DB_PASSWORD}@mongo:${MONGO_DB_PORT}/admin
    ports:
      - "9216:9216"
    restart: unless-stopped
    networks:
      - shared_net
    depends_on:
     - mongodb-exporter-percona

  mongodb-exporter-percona:
    image: percona/mongodb_exporter:latest
    container_name: mongodb-exporter-percona
    environment:
      MONGODB_URI: mongodb://${MONGO_DB_USER}:${MONGO_DB_PASSWORD}@mongo:${MONGO_DB_PORT}/admin?ssl=true
    ports:
      - "9001:9001"
    restart: unless-stopped
    networks:
      - shared_net
    depends_on:
      - mongo

  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - ./grafana:/etc/grafana
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - shared_net

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared-agent
    restart: unless-stopped
    network_mode: host
    command:
      tunnel run dungeon-bot-tunnel
    labels:
      environment: shared
      service: cloudflared
    logging:
      driver: "json-file"
      options:
        labels: environment,service
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TOKEN}

  zookeeper:
    image: 'confluentinc/cp-zookeeper:latest'
    container_name: zookeeper
    restart: always
    networks:
      - shared_net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    labels:
      environment: shared
      service: zookeeper
    logging:
      driver: "json-file"
      options:
        labels: environment,service
    ports:
      - '2181:2181'

  kafka:
    image: 'confluentinc/cp-kafka:latest'
    container_name: kafka
    restart: unless-stopped
    networks:
      - shared_net
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_PORT}:${KAFKA_PORT}
    labels:
      environment: shared
      service: kafka
    logging:
      driver: "json-file"
      options:
        labels: environment,service
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DEFAULT_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG4J_LOGGERS: "kafka.consumer.logger=INFO"

  mongo:
    image: mongo:latest
    container_name: mongo
    restart: unless-stopped
    networks:
      - shared_net
    ports:
      - ${MONGO_DB_PORT}:${MONGO_DB_PORT}
    labels:
      environment: shared
      service: mongo
    logging:
      driver: "json-file"
      options:
        labels: environment,service
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_DB_PASSWORD}
