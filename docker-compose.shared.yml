networks:
  shared_net:
    external: true

services:

  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yml
    labels:
      environment: logging
      service: loki
    logging:
      driver: "json-file"
      options:
        labels: environment,service
    volumes:
      - ./loki-config.yml:/etc/loki/local-config.yml
    restart: unless-stopped
    depends_on:
      - promtail
    networks:
      - shared_net

  promtail:
    image: grafana/promtail:2.9.2
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    labels:
      environment: logging
      service: promtail
    logging:
      driver: "json-file"
      options:
        labels: environment,service
    restart: unless-stopped
    networks:
      - shared_net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    labels:
      environment: logging
      service: prometheus
    logging:
      driver: "json-file"
      options:
        labels: environment,service
    command: --storage.tsdb.retention.time=7d
    volumes:
      - ./prometheus.yml:/prometheus/prometheus.yml
    restart: unless-stopped
    depends_on:
      - mongodb-exporter
      - loki
    networks:
      - shared_net

  mongodb-exporter:
    image: percona/mongodb_exporter:0.44.0
    container_name: mongodb-exporter
    command:
      - "--web.listen-address=:9001"
      - "--mongodb.uri=mongodb://monitoring:monitoringpassword@mongo:${MONGO_DB_PORT}/admin?authSource=admin&ssl=false"
    ports:
      - "9001:9001"
    restart: unless-stopped
    labels:
      environment: logging
      service: mongodb-exporter
    logging:
      driver: "json-file"
      options:
        labels: environment,service
    networks:
      - shared_net
    depends_on:
      - mongo

  jmx-exporter:
    image: bitnami/jmx-exporter:latest
    container_name: jmx-kafka-exporter
    restart: unless-stopped
    networks:
      - shared_net
    depends_on:
      - kafka
    ports:
      - "7071:7071"
    labels:
      environment: logging
      service: jmx-exporter
    logging:
      driver: "json-file"
      options:
        labels: environment,service
    environment:
      - JMX_EXPORTER_PORT=7071
      - JMX_EXPORTER_CONFIG=/opt/bitnami/jmx_exporter/config.yml
    volumes:
      - ./jmx_exporter/config.yml:/opt/bitnami/jmx_exporter/config.yml
    command: ["java", "-jar", "/opt/bitnami/jmx-exporter/bin/jmx_prometheus_httpserver.jar", "7071", "/opt/bitnami/jmx-exporter/config.yml"]

  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - ./grafana:/etc/grafana
    image: grafana/grafana:latest
    container_name: grafana
    labels:
      environment: logging
      service: grafana
    logging:
      driver: "json-file"
      options:
        labels: environment,service
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - prometheus
      - loki
    networks:
      - shared_net

  zookeeper:
    image: 'confluentinc/cp-zookeeper:latest'
    container_name: zookeeper
    restart: always
    networks:
      - shared_net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    labels:
      environment: shared
      service: zookeeper
    logging:
      driver: "json-file"
      options:
        labels: environment,service
    ports:
      - '2181:2181'

  kafka:
    image: 'confluentinc/cp-kafka:latest'
    container_name: kafka
    restart: unless-stopped
    networks:
      - shared_net
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_PORT}:${KAFKA_PORT}
      - "9999:9999"
    labels:
      environment: shared
      service: kafka
    logging:
      driver: "json-file"
      options:
        labels: environment,service
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_DEFAULT_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG4J_LOGGERS: "kafka.consumer.logger=INFO"
      KAFKA_JMX_HOSTNAME: kafka
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote=true
                              -Dcom.sun.management.jmxremote.local.only=false
                              -Dcom.sun.management.jmxremote.authenticate=false
                              -Dcom.sun.management.jmxremote.ssl=false
                              -Djava.rmi.server.hostname=kafka"

  mongo:
    image: mongo:latest
    container_name: mongo
    restart: unless-stopped
    networks:
      - shared_net
    ports:
      - ${MONGO_DB_PORT}:${MONGO_DB_PORT}
    labels:
      environment: shared
      service: mongo
    logging:
      driver: "json-file"
      options:
        labels: environment,service
    volumes:
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_DB_PASSWORD}
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      retries: 5

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    networks:
      - shared_net
    environment:
      PGDATA: /var/lib/postgresql/data
      POSTGRES_USER: ${POSTGRES_DATABASE_USER}
      POSTGRES_PASSWORD: ${POSTGRES_DATABASE_PASSWORD}
      POSTGRES_DB: postgres
    ports:
      - ${POSTGRES_DATABASE_PORT}:${POSTGRES_DATABASE_PORT}
    labels:
      environment: shared
      service: postgres
    logging:
      driver: "json-file"
      options:
        labels: environment,service
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d


volumes:
  pgdata:

