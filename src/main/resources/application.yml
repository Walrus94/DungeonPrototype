spring:
  application:
    name: dungeon-bot
  datasource:
    url: jdbc:postgresql://postgres:${POSTGRES_DATABASE_PORT}/${POSTGRES_DATABASE_NAME}
    name: ${POSTGRES_DATABASE_NAME}
    username: ${POSTGRES_DATABASE_USER}
    password: ${POSTGRES_DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2
      connection-timeout: 30000
      idle-timeout: 60000

  data:
    mongodb:
      uri: ${SPRING_DATA_MONGODB_URI}
      port: ${SPRING_DATA_MONGO_DB_PORT}
      database: ${SPRING_DATA_MONGODB_DATABASE}
      username: ${SPRING_DATA_MONGODB_USERNAME}
      password: ${SPRING_DATA_MONGODB_PASSWORD}
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
  profiles:
    active: ${SPRING_ACTIVE_PROFILE}

management:
  endpoints:
    web:
      exposure:
        include: metrics,prometheus
      base-path: /actuator
  metrics:
    tags:
      application: "dungeon-bot"
    enable:
      tomcat.threads: true
      jetty: true
      jvm: true
      process.memory: true
      jvm.threads.peak: true
      jvm.threads.live: true
      jvm.threads.daemon: true
  prometheus:
    metrics:
      export:
        enabled: true


server:
  port: ${BOT_WEBHOOK_PORT}

bot:
  username: ${BOT_USERNAME}
  path: ${BOT_WEBHOOK_PATH}
  webhook: ${BOT_WEBHOOK_URL}
  token: ${BOT_AUTH_TOKEN}
  auth-users: ${AUTH_USERS}
  files:
    images: ${IMAGE_PATH}

kafka-topics:
  item-naming-topic: ${ITEM_NAMING_TOPIC}
  balance-matrix-topic: ${BALANCE_MATRIX_TOPIC}
  game-results-topic: ${GAME_RESULTS_TOPIC}

messaging:
  bar-blocks: 6
  xp-bar-blocks: 10
  stat-bar-blocks: 10
  constants:
    emoji:
      treasure: "\uD83D\uDCB0"
      heart: "\uD83D\uDC9F"
      red-square: "\uD83D\uDFE5"
      diamond: "\uD83D\uDC8E"
      blue-square: "\uD83D\uDFE6"
      black-heart: "ðŸ–¤"
      sword: "\uD83D\uDDE1"
      dagger: "ðŸ”ª"
      shield: "\uD83D\uDEE1"
      stonks: "\uD83D\uDCC8"
      brown-block: "\uD83D\uDFEB"
      orange-block: "ðŸŸ§"
      axe: "\uD83E\uDE93"

  keyboard:
    buttons:
      bot-start:
        callback: /start
      start-game:
        callback: btn_start_game
        name: Start Game
      continue-game:
        callback: btn_continue_game
        name: Continue Game
      next-level:
        callback: btn_next_level
        name: Next Level
      left:
        callback: btn_left
        name: Left
      right:
        callback: btn_right
        name: Right
      forward:
        callback: btn_forward
        name: Forward
      back:
        callback: btn_turn_back
        name: Turn Back
      attack:
        callback: btn_attack
        name: ${messaging.constants.emoji.sword} %d
      secondary-attack:
        callback: btn_attack_sec
        name: ${messaging.constants.emoji.dagger} %d
      map:
        callback: btn_map
        name: Map
      player-stats:
        callback: btn_stats
        name: Stats
      menu-back:
        callback: btn_menu_back
        name: Back
      shrine:
        callback: btn_shrine_use
        name: Use
      merchant-buy-menu:
        callback: btn_merchant_buy_menu
        name: Buy items!
      merchant-buy-menu-back:
        callback: btn_merchant_buy_menu
        name: Back
      merchant-sell-menu:
        callback: btn_merchant_sell_menu
        name: Sell items!
      merchant-sell-menu-back:
        callback: btn_merchant_sell_menu
        name: Back
      restore-armor:
        callback: btn_restore_armor
        name: Restore Armor
      sharpen-weapon:
        callback: btn_sharpen_weapon
        name: Sharpen Weapon
      treasure-open:
        callback: btn_treasure_open
        name: Open
      treasure-gold-collected:
        callback: btn_treasure_gold_collected
        name: "%d ${messaging.constants.emoji.treasure}"
      treasure-item-collected:
        callback: btn_treasure_item_collected_%s
      treasure-collect-all:
        callback: btn_treasure_collect_all
        name: Collect all
      inventory:
        callback: btn_inventory
        name: Inventory
      head:
        callback: btn_inventory_display_head_%s
      vest:
        callback: btn_inventory_display_vest_%s
      gloves:
        callback: btn_inventory_display_gloves_%s
      boots:
        callback: btn_inventory_display_boots_%s
      right-hand:
        callback: btn_inventory_display_primary_weapon_%s
      left-hand:
        callback: btn_inventory_display_secondary_weapon_%s
      item-inventory:
        callback: btn_inventory_display_item_%s
      item-inventory-back:
        callback: btn_inventory
        name: Back
      item-inventory-equip:
        callback: btn_inventory_item_equip_%s
        name: (equip)
      item-inventory-un-equip:
        callback: btn_inventory_item_un_equip_%s
        name: (un-equip)
      merchant-sell-display-head:
        callback: btn_merchant_display_head_%s
      merchant-sell-display-vest:
        callback: btn_merchant_display_vest_%s
      merchant-sell-display-gloves:
        callback: btn_merchant_display_gloves_%s
      merchant-sell-display-boots:
        callback: btn_merchant_display_boots_%s
      merchant-sell-display-right-hand:
        callback: btn_merchant_display_primary_weapon_%s
      merchant-sell-display-left-hand:
        callback: btn_merchant_display_secondary_weapon_%s
      merchant-sell-display-item:
        callback: btn_merchant_display_item_%s
      merchant-item-sell:
        callback: btn_merchant_list_item_sell_%s
      merchant-item-buy:
        callback: btn_merchant_list_item_buy_%s
      merchant-sell-price:
        callback: btn_merchant_sell_%s
        name: "%d ${messaging.constants.emoji.treasure}"
      merchant-buy-price:
        callback: btn_merchant_buy_%s
        name: "%d ${messaging.constants.emoji.treasure}"
      player-attribute-upgrade:
        callback: btn_player_attribute_upgrade_%s

generation:
  level:
    level-one-grid-size: 10
    grid-size-increment: 1
    increment-step: 10
  monsters:
    zombie:
      primary-attack-type: slash
      secondary-attack-type: slash
    werewolf:
      primary-attack-type: growl
      secondary-attack-type: slash
    swamp-beast:
      primary-attack-type: poison_spit
      secondary-attack-type: bite
    vampire:
      primary-attack-type: vampire_bite
      secondary-attack-type: slash
    dragon:
      primary-attack-type: fire_spit
      secondary-attack-type: growl
  items:
    selling-price-ratio: 0.9
    buying-price-ratio: 1.2
    weapon:
      weapon-attribute-vector-size: 5
      weapon-attributes-pool-size: 500
      weapon-per-game: 200

    wearables:
      wearable-attribute-pool-size: 150
      wearables-per-game: 100

      default-armor: 5

    effects:
      minimum-amount-per-item-map:
        common: 0
        rare: 1
        epic: 2
        legendary: 3
        mythic: 3
      maximum-amount-per-item-map:
        common: 1
        rare: 2
        epic: 3
        legendary: 3
        mythic: 4


player:
  attributes: #TODO: consider different classes
    power: 5
    stamina: 4
    perception: 3
    magic: 1
    luck: 2
  base-hp: 60
  attribute-hp-factor: 10
  base-mana: 6
  attribute-mana-factor: 1
