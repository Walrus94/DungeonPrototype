name: Deploy on push

on:
  push:
    branches:
    - "master"
    - "develop"

jobs:
  build-and-run:
    runs-on: self-hosted
    environment: ${{vars.ENV}}
    permissions:
      contents: read

    steps:
      - name: Update repository
        run : cd ${{vars.WORK_DIR}} && 
          git checkout origin ${{ github.ref_name }} && 
          git pull
      - name: Set environment variables
        run: |
          cd ${{vars.WORK_DIR}} &&
          echo "ENV=${{vars.ENV}}" >> .env
          if [${{vars.JAVA_OPTIONS}} != '']; then
            echo "JAVA_OPTIONS=${{vars.JAVA_OPTIONS}}" >> .env
          fi
          echo "BOT_AUTH_TOKEN=${{ secrets.BOT_TOKEN }}" >> .env
          echo "BOT_USERNAME=${{vars.BOT_USERNAME}}" >> .env
          echo "BOT_WEBHOOK_PORT=${{vars.BOT_WEBHOOK_PORT}}" >> .env
          echo "BOT_WEBHOOK_URL=${{vars.BOT_WEBHOOK_URL}}" >> .env
          echo "CLOUDFLARE_TOKEN=${{secrets.CLOUDFLARE_TOKEN}}" >> .env
          echo "GRAFANA_USER=${{secrets.GRAFANA_USER}}" >> .env
          echo "GRAFANA_PASSWORD=${{secrets.GRAFANA_PASSWORD}}" >> .env
          echo "KAFKA_PORT=${{vars.KAFKA_PORT}}" >> .env
          echo "KAFKA_ITEM_NAMING_TOPIC=${{vars.KAFKA_ITEM_NAMING_TOPIC}}" >> .env
          echo "MONGO_DB_DATABASE_NAME=${{vars.MONGO_DB_DATABASE_NAME}}" >> .env
          echo "MONGO_DB_PORT=${{vars.MONGO_DB_PORT}}" >> .env
          echo "MONGO_DB_USER=${{ secrets.MONGO_DB_USER }}" >> .env
          echo "MONGO_DB_PASSWORD=${{ secrets.MONGO_DB_PASSWORD }}" >> .env
      - name: Run Shared services
        run: cd ${{vars.WORK_DIR}} &&
          docker-compose -f docker-compose.shared.yml --env-file .env up --build -d
      - name: Run Environment specific services
        run: cd ${{vars.WORK_DIR}} && 
          docker-compose --env-file .env up --build -d
      - name: Clean up environment file
        run: cd ${{vars.WORK_DIR}} && rm -f .env
      - name: Cleanup Docker Data
        run: docker system prune -af &&
          docker volume prune -f
      - name: Verify Cleanup
        run: docker system df
