name: Deploy to test

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Select the branch to deploy to the test environment"
        required: true
        type: choice
        options:
          # BEGIN BRANCH LIST
        - async-task-execution
        - codex/convert-game-results-to-balance-matrix
        - codex/group-threads-by-task-type-and-chatid
        - codex/introduce-single-consumer-for-asynctaskcompletionservice
        - develop
        - item-generation-refactoring
        - master
        - room-content-population
        - secure-test-environment
        - update-branch-list-15511882423
        - update-branch-list-12292818677
        - upgrade-gradle-dependencies
          # END BRANCH LIST

jobs:
  deploy:
    runs-on: self-hosted
    environment:
      name: test
    steps:

      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0
          persist-credentials: false
          clean: false

      - name: Set environment variables
        run: |
          echo "ENV=${{vars.ENV}}" >> .env
          echo "JAVA_OPTIONS=${{vars.JAVA_OPTIONS}}" >> .env
          echo "BOT_AUTH_TOKEN=${{ secrets.BOT_TOKEN }}" >> .env
          echo "AUTH_USERS=${{vars.AUTH_USERS}}" >> .env
          echo "BOT_USERNAME=${{vars.BOT_USERNAME}}" >> .env
          echo "BOT_WEBHOOK_PORT=${{vars.BOT_WEBHOOK_PORT}}" >> .env
          echo "BOT_WEBHOOK_PATH=${{vars.BOT_WEBHOOK_PATH}}" >> .env
          echo "BOT_WEBHOOK_URL=${{vars.BOT_WEBHOOK_URL}}" >> .env          
          echo "IMAGE_PATH=${{vars.IMAGE_PATH}}" >> .env
          echo "HUGGINGFACE_API_KEY=${{secrets.HUGGINGFACE_API_KEY}}" >> .env
          echo "CLOUDFLARE_TOKEN=${{secrets.CLOUDFLARE_TOKEN}}" >> .env
          echo "GRAFANA_USER=${{secrets.GRAFANA_USER}}" >> .env
          echo "GRAFANA_PASSWORD=${{secrets.GRAFANA_PASSWORD}}" >> .env
          echo "KAFKA_PORT=${{vars.KAFKA_PORT}}" >> .env
          echo "KAFKA_ITEM_NAMING_TOPIC=${{vars.KAFKA_ITEM_NAMING_TOPIC}}" >> .env
          echo "KAFKA_BALANCE_MATRIX_TOPIC=${{vars.KAFKA_BALANCE_MATRIX_TOPIC}}" >> .env
          echo "KAFKA_GAME_RESULTS_TOPIC=${{vars.KAFKA_GAME_RESULTS_TOPIC}}" >> .env
          echo "MONGO_DB_DATABASE_NAME=${{vars.MONGO_DB_DATABASE_NAME}}" >> .env
          echo "MONGO_DB_PORT=${{vars.MONGO_DB_PORT}}" >> .env
          echo "MONGO_DB_USER=${{ secrets.MONGO_DB_USER }}" >> .env
          echo "MONGO_DB_PASSWORD=${{ secrets.MONGO_DB_PASSWORD }}" >> .env
          echo "MONGO_MONITORING_USER=${{ secrets.MONGO_MONITORING_USER }}" >> .env
          echo "MONGO_MONITORING_PASSWORD=${{ secrets.MONGO_MONITORING_PASSWORD }}" >> .env
          echo "POSTGRES_DATABASE_NAME=${{vars.POSTGRES_DATABASE_NAME}}" >> .env
          echo "POSTGRES_DATABASE_PASSWORD=${{secrets.POSTGRES_DATABASE_PASSWORD}}" >> .env
          echo "POSTGRES_DATABASE_USER=${{secrets.POSTGRES_DATABASE_USER}}" >> .env
          echo "POSTGRES_DATABASE_PORT=${{vars.POSTGRES_DATABASE_PORT}}" >> .env

      - name: Generate init-mongo.js from template
        run: |
          envsubst < init-mongo-monitoring-user.template.js > init-scripts/init-mongo-monitoring-user.js

      - name: Pre-deploy cleanup
        run: |
          docker-compose -p test --env-file .env down --remove-orphans || true
          docker network rm test_net || true
          docker volume prune -f || true
          docker system prune -af || true

      - name: Create shared network
        run: |
          if [ ! "$(docker network ls | grep shared_net)" ]; then
            echo "Creating shared_net network ..."
            docker network create shared_net
          else
            echo "shared_net network exists."
          fi

      - name: Run Shared services
        run: docker-compose -p shared -f docker-compose.shared.yml --env-file .env up --build -d
      - name: Create network
        run: |
          if [ ! "$(docker network ls | grep test_net)" ]; then
            echo "Creating test_net network ..."
            docker network create test_net
          else
            echo "test_net network exists."
          fi
      - name: Run Environment specific services
        run: docker-compose -p test --env-file .env up --build -d
      - name: Clean up environment file
        run: rm -f .env
      - name: Cleanup Docker Data
        run: docker system prune -af &&
          docker volume prune -f
      - name: Verify Cleanup
        run: docker system df
